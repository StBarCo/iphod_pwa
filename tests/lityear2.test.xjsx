// Jest Test: lityear based on March 1 as first of the year

const expect = require('chai').expect;
const LitYear = require('../src/js/lityear2.js').LitYear;
const moment = require('moment');

describe('sanity', () => {
	it('should return true', function() {
  		expect(true).to.equal(true);
	})
});

describe('march1onSunday', () => {
	it('should be true in 2020', function(){
		var day = moment([2020, 5, 5]);
		expect( LitYear.march1onSunday(day) ).to.equal(true);
	})
	it('should be false in 2019', function() {
		var day = moment([2019, 3, 6]);
		expect( LitYear.march1onSunday(day) ).to.equal(false);
	})
})

describe('doyr (Day of Year based on March 1)', () => {
	it('should return 1 for March 1', function() {
		var mar1 = moment([2019, 2, 1]);
		expect( LitYear.doyr(mar1) ).to.equal(1);
	});
	it('should return 32 for April 1', function() {
	  	var apr1 = moment([2019, 3, 1])
	  	expect( LitYear.doyr(apr1) ).to.equal(32);
	});
	it('should return 300 for Christmas Day', function() {
	  	var christmas = moment([2019, 11, 25])
		expect( LitYear.doyr(christmas) ).to.equal(300);
	});
	it('should return 365 for Feb 28', function() {
		var feb28 = moment([2019, 1, 28]);
		expect( LitYear.doyr(feb28) ).to.equal(365);
	})
})

describe('woyr (Week of Year based on March 1)', () => {
	it('should return 1 for March 1 when March 1 is on a Sunday', function() {
		var mar1 = moment([2020, 2, 1]);
		expect( LitYear.woyr(mar1) ).to.equal(1);
	});
	it('should return 52 for March 1 when March 1 is not on a Sunday', function() {
		var mar1 = moment([2019, 2, 1]);
		expect( LitYear.woyr(mar1) ).to.equal(52);
	});
	it('should return 2 for March 8 when March 1 is on a Sunday', function() {
		var mar8 = moment([2020, 2, 8]);
		expect( LitYear.woyr(mar8) ).to.equal(2);
	});
	it('should return 1 for March 8 when March 1 is not on Sunday', function() {
		var mar8 = moment([2019, 2, 8]);
		expect( LitYear.woyr(mar8) ).to.equal(1);
	})

//describe('easter')
})